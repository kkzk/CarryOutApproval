"""
Django settings for carry_out_approval project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os
# import ldap
# from django_auth_ldap.config import LDAPSearch

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-p-&2w+m!4-8zzo($a755#8uz0mv@u5+$$zx*gqof+8m4j-#+*=')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# Django 5.2でrunserverでASGIを使用する実験的設定
USE_EXPERIMENTAL_ASYNC = True

ALLOWED_HOSTS_STR = config('ALLOWED_HOSTS', default='localhost,127.0.0.1')
ALLOWED_HOSTS = ALLOWED_HOSTS_STR.split(',') if isinstance(ALLOWED_HOSTS_STR, str) else ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'channels',
    'rest_framework',
    'corsheaders',
    'django_python3_ldap',
    'applications',
    'users', 
    'audit',
    'notifications',
]

# 通知機能 ON/OFF フラグ（後で復活予定）
NOTIFICATIONS_ENABLED = False  # 一時停止中。復活時 True に変更または環境変数化

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # whitenoiseを追加
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'users.middleware.SessionManagementMiddleware',  # カスタムセッション管理
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'carry_out_approval.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'carry_out_approval.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# 開発環境用の追加設定
if DEBUG:
    STATICFILES_DIRS = [
        BASE_DIR / 'static',
    ]

# WhiteNoise settings
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# WhiteNoise configuration for better static file handling
WHITENOISE_USE_FINDERS = DEBUG  # 開発環境でstaticfilesファインダーを使用
WHITENOISE_AUTOREFRESH = DEBUG  # 開発環境で自動リフレッシュを有効化
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'zip', 'gz', 'tgz', 'bz2', 'tbz', 'xz', 'br']

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# File storage settings
UPLOAD_DIR = BASE_DIR / 'storage' / 'uploads'
APPROVED_DIR = BASE_DIR / 'storage' / 'approved'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# カスタムユーザモデル
AUTH_USER_MODEL = 'users.User'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:3001",
    "http://127.0.0.1:3001",
]

CORS_ALLOW_CREDENTIALS = True

# Login/Logout URLs
LOGIN_URL = '/users/login/'
LOGIN_REDIRECT_URL = '/applications/'
LOGOUT_REDIRECT_URL = '/users/login/'

# Authentication backends (LDAP専用)
AUTHENTICATION_BACKENDS = [
    'users.backends.WindowsLDAPBackend',  # 優先
    'django.contrib.auth.backends.ModelBackend',  # Djangoデフォルト
]

# Logging settings for LDAP debugging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'detailed': {
            'format': '%(levelname)s %(asctime)s %(name)s %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'detailed',
        },
    },
    'loggers': {
        'django_python3_ldap': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        'django.security.authentication': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'users.backends': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

"""LDAP/Active Directory 設定

環境変数命名を以下に統一:
    LDAP_SERVER_URL        例: ldap://host:389
    LDAP_USE_SSL           true/false (StartTLS ではなく LDAPS 利用フラグとして再利用)
    LDAP_SEARCH_BASE       例: DC=example,DC=com
    LDAP_DOMAIN            例: example (sAMAccountName の UPN/NTLM 用)
    LDAP_BIND_DN           サービスバインド用DN
    LDAP_BIND_PASSWORD     そのパスワード

django_python3_ldap の従来変数 (LDAP_AUTH_*) を内部でエイリアスとして残し、
既存コードやライブラリ互換を確保する。
"""

# Canonical unified env-based settings
LDAP_SERVER_URL = config('LDAP_SERVER_URL', default="ldap://your-domain-controller.example.com:389")
LDAP_USE_SSL = config('LDAP_USE_SSL', default=False, cast=bool)
LDAP_SEARCH_BASE = config('LDAP_SEARCH_BASE', default="DC=example,DC=com")
LDAP_DOMAIN = config('LDAP_DOMAIN', default="example")
LDAP_BIND_DN = config('LDAP_BIND_DN', default="CN=Administrator,CN=Users,DC=example,DC=com")
LDAP_BIND_PASSWORD = config('LDAP_BIND_PASSWORD', default="your_admin_password")
LDAP_UPN_SUFFIX = config('LDAP_UPN_SUFFIX', default=None)
LDAP_FORCE_STARTTLS = config('LDAP_FORCE_STARTTLS', default=False, cast=bool)
LDAP_ALLOW_PLAIN_FALLBACK = config('LDAP_ALLOW_PLAIN_FALLBACK', default=False, cast=bool)
LDAP_TLS_INSECURE = config('LDAP_TLS_INSECURE', default=False, cast=bool)  # True: 証明書検証緩和 (開発用途のみ)

# Backward compatibility / django_python3_ldap expected names
LDAP_AUTH_URL = LDAP_SERVER_URL
LDAP_AUTH_USE_TLS = LDAP_USE_SSL
LDAP_AUTH_SEARCH_BASE = LDAP_SEARCH_BASE
LDAP_AUTH_CONNECTION_USERNAME = LDAP_BIND_DN
LDAP_AUTH_CONNECTION_PASSWORD = LDAP_BIND_PASSWORD

# 以下は django_python3_ldap 用 (必要なら保持)
LDAP_AUTH_OBJECT_CLASS = "user"
LDAP_AUTH_USER_FIELDS = {
    "username": "sAMAccountName",
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
}
LDAP_AUTH_USER_LOOKUP_FIELDS = ("username",)

# ユーザー同期設定
LDAP_AUTH_SYNC_USER_RELATIONS = True

# 認証時のバインドDN形式（Active Directory用）
LDAP_AUTH_FORMAT_USERNAME = "django_python3_ldap.utils.format_username_active_directory"
# LDAP_AUTH_FORMAT_USERNAME = "django_python3_ldap.utils.format_username_openldap"

# Clean user data function
LDAP_AUTH_CLEAN_USER_DATA = "carry_out_approval.settings.setup_ldap_user"

# Custom user setup function for setting staff status
def setup_ldap_user(user, ldap_attributes):
    """LDAP認証後のユーザー設定（Active Directory対応）"""
    # デフォルトでスタッフ権限を付与（テスト用）
    user.is_staff = True
    user.is_active = True
    
    # Active Directory用属性マッピング
    # displayNameがあれば設定
    display_name = ldap_attributes.get('displayName')
    if display_name and isinstance(display_name, list) and display_name:
        full_name = display_name[0]
        if ' ' in full_name:
            user.first_name, user.last_name = full_name.split(' ', 1)
        else:
            user.first_name = full_name
    
    # givenNameとsnがある場合は優先（Active Directory標準属性）
    given_name = ldap_attributes.get('givenName')
    sn = ldap_attributes.get('sn')
    if given_name and isinstance(given_name, list):
        user.first_name = given_name[0]
    if sn and isinstance(sn, list):
        user.last_name = sn[0]
    
    # Active Directory用のメール属性
    mail = ldap_attributes.get('mail')
    if mail and isinstance(mail, list):
        user.email = mail[0]
        
    user.save()

# LDAP user cleanup function
LDAP_AUTH_CLEAN_USER_DATA = 'carry_out_approval.settings.setup_ldap_user'

# Session Settings（複数ブラウザでの同時ログインを可能にする設定）
SESSION_COOKIE_AGE = 86400  # 24時間（秒単位）
SESSION_COOKIE_NAME = 'sessionid'  # Django標準のsessionidに戻す
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # ブラウザを閉じてもセッション保持
SESSION_SAVE_EVERY_REQUEST = True  # リクエストごとにセッションを保存
SESSION_COOKIE_HTTPONLY = True  # XSS対策
SESSION_COOKIE_SECURE = False  # 開発環境ではFalse（本番環境ではTrue）
SESSION_COOKIE_SAMESITE = 'Lax'  # CSRF対策

# セッションエンジン（デフォルトはデータベース）
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# Django Channels settings
ASGI_APPLICATION = 'carry_out_approval.asgi.application'

# Channel layers (開発環境用 - インメモリ)
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

# 本番環境でRedisが利用可能な場合はこちらを使用
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [('127.0.0.1', 6379)],
#         },
#     },
# }
